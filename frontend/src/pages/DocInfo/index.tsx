import React, {useEffect, useRef, useState} from 'react';
import { useNavigate } from 'react-router-dom';
import {Button, DatePicker, Dropdown, Form, Input, Layout, Menu, Message, Modal, Space, Table, Tree} from '@arco-design/web-react';
import {IconDelete, IconEdit, IconFile, IconList, IconPlus, IconSearch} from '@arco-design/web-react/icon';
import FilterForm from '@/components/FilterForm';
import AddDocInfoModal from './components/AddDocInfoModal';
import EditDocInfoModal from './components/EditDocInfoModal';
import DetailDocInfoModal from './components/DetailDocInfoModal';

import {deleteDocInfo, getDocInfoById, getDocInfoList, getDocHeadingTree} from './api';
import './index.less';

const {Content} = Layout;

function DocInfoManager() {
    const navigate = useNavigate();
    
    // Ë°®Ê†ºÊï∞ÊçÆÁä∂ÊÄÅ
    const [tableData, setTableData] = useState([]);
    const [loading, setLoading] = useState(false);

    // Ê®°ÊÄÅÊ°ÜÁä∂ÊÄÅ
    const [addModalVisible, setAddModalVisible] = useState(false);
    const [editModalVisible, setEditModalVisible] = useState(false);
    const [detailModalVisible, setDetailModalVisible] = useState(false);
    const [headingTreeModalVisible, setHeadingTreeModalVisible] = useState(false);

    const [currentRecord, setCurrentRecord] = useState<any>(null);
    const [headingTreeData, setHeadingTreeData] = useState<any[]>([]);
    const [headingTreeLoading, setHeadingTreeLoading] = useState(false);

    // Ë°®ÂçïÂºïÁî®
    const filterFormRef = useRef<any>();

    // ÂàÜÈ°µÈÖçÁΩÆ
    const [pagination, setPagination] = useState({
        current: 1,
        pageSize: 20,
        total: 0,
        showTotal: true,
        showJumper: true,
        showPageSize: true,
    });

    // Ëé∑ÂèñÊñáÊ°£ÂàóË°®
    const fetchDocInfoList = async (params = {}) => {
        setLoading(true);
        try {
            const response = await getDocInfoList({
                ...params,
                pageNum: pagination.current - 1,
                pageSize: pagination.pageSize
            });

            setTableData(response.data.content || []);
            setPagination(prev => ({
                ...prev,
                total: response.data.totalElements || 0
            }));
        } catch (error) {
            console.error('Ëé∑ÂèñÊñáÊ°£ÂàóË°®Â§±Ë¥•:', error);
            Message.error('Ëé∑ÂèñÊñáÊ°£ÂàóË°®Â§±Ë¥•');
        } finally {
            setLoading(false);
        }
    };

    // ÂàùÂßãÂä†ËΩΩ
    useEffect(() => {
        fetchDocInfoList();
    }, []);

    // Â§ÑÁêÜÂàÜÈ°µÂèòÂåñ
    const handlePaginationChange = (page: number, pageSize: number) => {
        setPagination(prev => ({
            ...prev,
            current: page,
            pageSize
        }));

        // Ëé∑ÂèñËøáÊª§Êù°‰ª∂
        const formValues = filterFormRef.current?.getFieldsValue() || {};
        fetchDocInfoList({
            ...formValues,
            pageNum: page,
            pageSize
        });
    };

    // ÊêúÁ¥¢Ë°®Ê†ºÊï∞ÊçÆ
    const searchTableData = (params = {}) => {
        setPagination(prev => ({...prev, current: 1}));
        fetchDocInfoList({
            ...params,
            pageNum: 1,
            pageSize: pagination.pageSize
        });
    };

    // Â§ÑÁêÜÊ∑ªÂä†
    const handleAdd = () => {
        setAddModalVisible(true);
    };

    // Â§ÑÁêÜÊü•ÁúãËØ¶ÊÉÖ
    const handleDetail = (record: any) => {
        setCurrentRecord(record);
        setDetailModalVisible(true);
    };

    // Â§ÑÁêÜÁºñËæë
    const handleEdit = async (record: any) => {
        try {
            const detail = await getDocInfoById(record.id);
            setCurrentRecord(detail.data);
            setEditModalVisible(true);
        } catch (error) {
            console.error('Ëé∑ÂèñÊñáÊ°£ËØ¶ÊÉÖÂ§±Ë¥•:', error);
            Message.error('Ëé∑ÂèñÊñáÊ°£ËØ¶ÊÉÖÂ§±Ë¥•');
        }
    };

    // Â§ÑÁêÜÊü•ÁúãÊ†áÈ¢òÊ†ë
    const handleViewHeadingTree = async (record: any) => {
        setCurrentRecord(record);
        setHeadingTreeLoading(true);
        try {
            const response = await getDocHeadingTree(record.id);
            // ËΩ¨Êç¢Ê†áÈ¢òÊ†ëÊï∞ÊçÆ‰∏∫TreeÁªÑ‰ª∂ÈúÄË¶ÅÁöÑÊ†ºÂºè
            const formatTreeData = (data: any[]): any[] => {
                return data.map(item => ({
                    key: item.id,
                    title: `${item.headingLevel === 1 ? 'üìë' : item.headingLevel === 2 ? 'üìÑ' : 'üìå'} ${item.headingText}`,
                    children: item.children ? formatTreeData(item.children) : undefined
                }));
            };
            setHeadingTreeData(formatTreeData(response.data));
            setHeadingTreeModalVisible(true);
        } catch (error) {
            console.error('Ëé∑ÂèñÊñáÊ°£Ê†áÈ¢òÊ†ëÂ§±Ë¥•:', error);
            Message.error('Ëé∑ÂèñÊñáÊ°£Ê†áÈ¢òÊ†ëÂ§±Ë¥•');
        } finally {
            setHeadingTreeLoading(false);
        }
    };

    // Â§ÑÁêÜÂà†Èô§
    const handleDelete = async (record: any) => {
        Modal.confirm({
            title: 'Á°ÆËÆ§Âà†Èô§',
            content: `Á°ÆÂÆöË¶ÅÂà†Èô§ÊñáÊ°£„Äå${record.fileName}„ÄçÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§ç„ÄÇ`,
            async onOk() {
                try {
                    await deleteDocInfo(record.id);
                    Message.success('ÊñáÊ°£Âà†Èô§ÊàêÂäü');
                    fetchDocInfoList();
                } catch (error) {
                    console.error('ÊñáÊ°£Âà†Èô§Â§±Ë¥•:', error);
                    Message.error('ÊñáÊ°£Âà†Èô§Â§±Ë¥•');
                }
            }
        });
    };

    // Âà∑Êñ∞ÂàóË°®
    const handleRefresh = () => {
        fetchDocInfoList();
    };

    // Ë°®Ê†ºÂàóÈÖçÁΩÆ
    const columns = [
        {
            title: 'Êñá‰ª∂Âêç',
            dataIndex: 'fileName',
            key: 'fileName',
            width: 200,
        },
        {
            title: 'Êñá‰ª∂MD5',
            dataIndex: 'fileMd5',
            key: 'fileMd5',
            width: 250,
            ellipsis: true,
            tooltip: (text: string) => text,
        },
        {
            title: '‰∏ä‰º†Áî®Êà∑',
            dataIndex: 'uploadUser',
            key: 'uploadUser',
            width: 120,
            render: (text: string) => text || '--',
        },
        {
            title: '‰∏ä‰º†Êó∂Èó¥',
            dataIndex: 'uploadTime',
            key: 'uploadTime',
            width: 180,
            render: (value: string) => {
                if (!value) return '--';

                const now = new Date();
                const date = new Date(value);
                const diffMs = now.getTime() - date.getTime();
                const diffSeconds = Math.floor(diffMs / 1000);
                const diffMinutes = Math.floor(diffSeconds / 60);
                const diffHours = Math.floor(diffMinutes / 60);
                const diffDays = Math.floor(diffHours / 24);

                // ‰ªäÂ§©
                if (diffDays === 0) {
                    if (diffSeconds < 60) {
                        return `${diffSeconds}ÁßíÂâç`;
                    } else if (diffMinutes < 60) {
                        return `${diffMinutes}ÂàÜÈíüÂâç`;
                    } else {
                        return `${diffHours}Â∞èÊó∂Ââç`;
                    }
                }
                // Êò®Â§©
                else if (diffDays === 1) {
                    const hours = String(date.getHours()).padStart(2, '0');
                    const minutes = String(date.getMinutes()).padStart(2, '0');
                    return `Êò®Â§© ${hours}:${minutes}`;
                }
                // Êò®Â§©‰πãÂâç
                else {
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    const hours = String(date.getHours()).padStart(2, '0');
                    const minutes = String(date.getMinutes()).padStart(2, '0');
                    return `${year}-${month}-${day} ${hours}:${minutes}`;
                }
            },
        },
        {
            title: 'Êìç‰Ωú',
            width: 100,
            align: 'center',
            fixed: 'right',
            render: (_, record) => (
                <Dropdown
                    droplist={
                        <Menu>
                                <Menu.Item key="detail" onClick={() => navigate(`/quiz/frame/docinfo/detail/${record.id}`)}>
                                    <IconFile style={{marginRight: 8}}/>
                                    Êü•ÁúãËØ¶ÊÉÖ
                                </Menu.Item>
                                <Menu.Item key="features" onClick={() => navigate(`/quiz/frame/docinfo/features/${record.id}`)}>
                                    <IconSearch style={{marginRight: 8}}/>
                                    Êü•ÁúãÂäüËÉΩÁÇπ
                                </Menu.Item>
                                <Menu.Item key="headingTree" onClick={() => handleViewHeadingTree(record)}>
                                    <IconList style={{marginRight: 8}}/>
                                    Ê†áÈ¢òÊ†ë
                                </Menu.Item>
                                <Menu.Item key="edit" onClick={() => handleEdit(record)}>
                                    <IconEdit style={{marginRight: 8}}/>
                                    ÁºñËæë
                                </Menu.Item>
                                <Menu.Item key="delete" onClick={() => handleDelete(record)}>
                                    <IconDelete style={{marginRight: 8}}/>
                                    Âà†Èô§
                                </Menu.Item>
                            </Menu>
                    }
                    position="bl"
                >
                    <Button
                        type="text"
                        className="more-btn"
                        onClick={e => {
                            e.stopPropagation();
                        }}
                    >
                        <IconList/>
                    </Button>
                </Dropdown>
            ),
        },
    ];

    // ÁõëÂê¨Á™óÂè£Â§ßÂ∞èÂèòÂåñÔºåÂä®ÊÄÅË∞ÉÊï¥Ë°®Ê†ºÈ´òÂ∫¶
    useEffect(() => {
        const calculateTableHeight = () => {
            const windowHeight = window.innerHeight;
            // ÂáèÂéªÈ°µÈù¢ÂÖ∂‰ªñÂÖÉÁ¥†ÁöÑÈ´òÂ∫¶ÔºåÂ¶ÇÂ§¥ÈÉ®„ÄÅÁ≠õÈÄâÂå∫Âüü„ÄÅÂàÜÈ°µÁ≠â
            // ËøôÈáåÂèØ‰ª•Ê†πÊçÆÂÆûÈôÖÈ°µÈù¢Â∏ÉÂ±ÄË∞ÉÊï¥ËÆ°ÁÆóÈÄªËæë
            const otherElementsHeight = 245; // È¢Ñ‰º∞ÂÖ∂‰ªñÂÖÉÁ¥†Âç†Áî®ÁöÑÈ´òÂ∫¶
            const newHeight = Math.max(200, windowHeight - otherElementsHeight);
            // ËøôÈáå‰∏çÁõ¥Êé•ËÆæÁΩÆÈ´òÂ∫¶ÔºåËÄåÊòØÈÄöËøáTableÁöÑscroll.yÂ±ûÊÄßÂä®ÊÄÅË∞ÉÊï¥
        };

        // ÂàùÂßãËÆ°ÁÆó
        calculateTableHeight();

        // ÁõëÂê¨Á™óÂè£Â§ßÂ∞èÂèòÂåñ
        const handleResize = () => {
            calculateTableHeight();
        };

        window.addEventListener('resize', handleResize);

        // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®
        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []);

    return (
        <Layout className="docinfo-manager">
            <Content>
                {/* Á≠õÈÄâË°®Âçï */}
                <FilterForm onSearch={searchTableData} onReset={searchTableData}>
                    <Form.Item label="Êñá‰ª∂Âêç" field="fileName">
                        <Input placeholder="ËØ∑ËæìÂÖ•Êñá‰ª∂Âêç"/>
                    </Form.Item>
                </FilterForm>

                <div className="action-buttons">
                    <Button
                        type="primary"
                        icon={<IconPlus/>}
                        onClick={handleAdd}
                    >
                        Êñ∞Â¢ûÊñáÊ°£
                    </Button>
                </div>

                {/* Ë°®Ê†º */}
                <Table
                    columns={columns}
                    data={tableData}
                    loading={loading}
                    pagination={pagination}
                    onChange={handlePaginationChange}
                    rowKey="id"
                    scroll={{x: 1200}}
                />

                {/* Ê∑ªÂä†ÊñáÊ°£Ê®°ÊÄÅÊ°Ü */}
                <AddDocInfoModal
                    visible={addModalVisible}
                    onCancel={() => setAddModalVisible(false)}
                    onSuccess={handleRefresh}
                />

                {/* ÁºñËæëÊñáÊ°£Ê®°ÊÄÅÊ°Ü */}
                <EditDocInfoModal
                    visible={editModalVisible}
                    record={currentRecord}
                    onCancel={() => {
                        setEditModalVisible(false);
                        setCurrentRecord(null);
                    }}
                    onSuccess={handleRefresh}
                />

                {/* ÊñáÊ°£ËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü */}
                <DetailDocInfoModal
                    visible={detailModalVisible}
                    record={currentRecord}
                    onCancel={() => {
                        setDetailModalVisible(false);
                        setCurrentRecord(null);
                    }}
                />

                {/* ÊñáÊ°£Ê†áÈ¢òÊ†ëÊ®°ÊÄÅÊ°Ü */}
                <Modal
                    title={`${currentRecord?.fileName || 'ÊñáÊ°£'} - Ê†áÈ¢òÊ†ë`}
                    visible={headingTreeModalVisible}
                    onCancel={() => {
                        setHeadingTreeModalVisible(false);
                        setHeadingTreeData([]);
                    }}
                    width={600}
                    footer={null}
                >
                    <div style={{ maxHeight: '500px', overflow: 'auto' }}>
                        {headingTreeLoading ? (
                            <div style={{ textAlign: 'center', padding: '40px 0' }}>Âä†ËΩΩ‰∏≠...</div>
                        ) : headingTreeData.length > 0 ? (
                            <Tree
                                treeData={headingTreeData}
                                defaultExpandAll
                                style={{ marginTop: 16 }}
                            />
                        ) : (
                            <div style={{ textAlign: 'center', padding: '40px 0', color: 'var(--color-text-secondary)' }}>
                                ÊöÇÊó†Ê†áÈ¢òÊï∞ÊçÆ
                            </div>
                        )}
                    </div>
                </Modal>

            </Content>
        </Layout>
    );
}

export default DocInfoManager;